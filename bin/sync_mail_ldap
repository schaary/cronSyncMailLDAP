#!/usr/bin/env ruby
# encoding: UTF-8

require 'awesome_print'
require 'json'
require 'net-ldap'
require 'pry'
require 'redis'
require 'thor'

require_relative "../lib/idm"

class SyncMailLDAP < Thor

  LDAP_CHECKSUM_SET = 'mail:s_checksum_ldap_mail'
  UMT_CHECKSUM_SET  = 'mail:s_checksum_umt'

  desc 'new','add all missing accounts to the ldap'
  def new
    cleanup_redis_db
    fetch_idm
    fetch_ldap

    counter = 0
    missing_entries.map do |checksum|
      counter += 1
      puts "#{counter}: #{checksum}"
      write_new_entry checksum
    end
  end

  desc "delete","deletes obsolete entries"
  def delete
    cleanup_redis_db
    fetch_idm
    fetch_ldap

    unless 0 == missing_entries.size
      puts "[ERROR] there are missing entries left."
      puts "[ERROR] run 'sync_physik_ldap new' first"
      exit
    end

    counter = 0
    obsolete_entries.map do |checksum|
      delete_obsolete_entry checksum
      counter += 1
    end
    puts "#{counter} Eintraege aktualisiert"
  end

private
  def connect_redis
    @redis ||= Redis.new
  end

  def connect_ldap
    unless @ldap
      @ldap = Net::LDAP.new
      @ldap.host = ENV.fetch('LDAP1_ITZ_HOST')
      @ldap.port = ENV.fetch('LDAP1_ITZ_PORT')
      @ldap.encryption :simple_tls
      @ldap.auth ENV.fetch('LDAP1_ITZ_USER'), ENV.fetch('LDAP1_ITZ_PASSWORD')
    end
  end

  def cleanup_redis_db
    connect_redis
    @redis.del LDAP_CHECKSUM_SET
    @redis.del UMT_CHECKSUM_SET
  end

  def fetch_idm
    idm = Idm.new
    connect_redis

    @accounts = idm.fetch

    #binding.pry

    @accounts.map do |account|
      @redis.sadd UMT_CHECKSUM_SET, account.checksum
    end

  end

  def fetch_ldap
    connect_ldap
    connect_redis

    filter = Net::LDAP::Filter.eq 'mail','*'
    basedn = 'ou=mail,o=mlu,c=de'
    attr = ['carLicense']


    @ldap.search(base: basedn, filter: filter, attributes: attr) do |entry|
      unless entry[:carLicense].empty?
        @redis.sadd LDAP_CHECKSUM_SET,entry[:carLicense][0]
      end
    end
  end

  def write_new_entry checksum
    account = @accounts.select{ |a| a.checksum == checksum }.first

    dn = "uid=#{account.checksum},ou=mail,o=mlu,c=de"
    attributes = account.to_ldif

    unless @ldap.add dn: dn, attributes: attributes
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end
  end

  def delete_obsolete_entry checksum
    dn = "uid=#{checksum},ou=mail,o=mlu,c=de"

    unless @ldap.delete dn: dn
      puts "Result: #{@ldap.get_operation_result.code}"
      puts "Message: #{@ldap.get_operation_result.message}"
    end
  end

  def obsolete_entries
    @redis.sdiff LDAP_CHECKSUM_SET, UMT_CHECKSUM_SET
  end

  def missing_entries
    @redis.sdiff UMT_CHECKSUM_SET, LDAP_CHECKSUM_SET
  end
end

SyncMailLDAP.start
